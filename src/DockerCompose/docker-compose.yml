version: '3.8'
volumes:
  kafka-volume:

services:
  kafka:
     image: 'obsidiandynamics/kafka:latest'
     ports:
          - "2181:2181"
          - "9092:9092"
     environment:
          KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
          KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
          KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
          KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
          KAFKA_RESTART_ATTEMPTS: "10"
          KAFKA_RESTART_DELAY: "5"
          ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
     volumes:
     - kafka-volume:/var
  
  kafdrop:
   image: 'obsidiandynamics/kafdrop:latest'
   depends_on:
       - kafka
   ports:
   - 9000:9000
   environment:
   - KAFKA_BROKERCONNECT=kafka:29092
   - JVM_OPTS=-Xms32M -Xmx64M
   - SERVER_SERVLET_CONTEXTPATH=/

  myfrontend:
    image: ${DOCKER_REGISTRY-}myfrontend
    build:
      context: .
      dockerfile: MyFrontEnd/Dockerfile
    ports:
      - "51000:50001"
    depends_on:
    - mybackend

  myfrontend-dapr:
    container_name: myfrontend-sidecar
    image: "daprio/daprd:latest"
    command: [
      "./daprd",
      "--app-id", "MyFrontEnd",
      "--app-port", "80",
      "--placement-host-address", "dapr-placement:50006", # Dapr's placement service can be reached via the docker DNS entry
      "--components-path", "/dapr/components",
      "--config", "/dapr/config.yaml"
    ]
    depends_on:
      - myfrontend
    network_mode: "service:myfrontend"
    volumes:
      - type: bind
        source: ./dapr/config.yaml
        target: /dapr/config.yaml

  mybackend:
    image: ${DOCKER_REGISTRY-}mybackend
    build:
      context: .
      dockerfile: MyBackEnd/Dockerfile
    ports:
      - "52000:50001"
    depends_on:
    - dapr-placement
    - kafka

  mybackend-dapr:
    container_name: mybackend-sidecar
    image: "daprio/daprd:latest"
    command: [
      "./daprd",
      "--app-id", "MyBackEnd",
      "--app-port", "80",
      "--placement-host-address", "dapr-placement:50006", # Dapr's placement service can be reached via the docker DNS entry
      "--components-path", "/dapr/components",
      "--config", "/dapr/config.yaml"
    ]
    depends_on:
      - mybackend
    network_mode: "service:mybackend"
    volumes:
      - type: bind
        source: ./dapr/config.yaml
        target: /dapr/config.yaml
      - type: bind
        source: ./dapr/components/bindings/bindings.yaml
        target: /dapr/components/bindings.yaml

  publishbackend:
    image: ${DOCKER_REGISTRY-}publishbackend
    build:
        context: .
        dockerfile: PublishBackend/Dockerfile
    depends_on:
    - dapr-placement
    - kafka

  PublishBackend-dapr:
    container_name: publishbackend-sidecar
    image: "daprio/daprd:latest"
    command: [
      "./daprd",
      "--app-id", "PublishBackend",
      "--app-port", "80",
      "--placement-host-address", "dapr-placement:50006", # Dapr's placement service can be reached via the docker DNS entry
      "--components-path", "/dapr/components",
      "--config", "/dapr/config.yaml"
    ]
    depends_on:
      - publishbackend
    network_mode: "service:publishbackend"
    volumes:
      - type: bind
        source: ./dapr/config.yaml
        target: /dapr/config.yaml
      - type: bind
        source: ./dapr/components/pubsub/pubsub.yaml
        target: /dapr/components/pubsub.yaml

  dtc-maildev:
    container_name: dtc-maildev
    image: maildev/maildev:latest
    environment:
      - MAILDEV_SMTP_PORT=25
      - MAILDEV_WEB_PORT=80
    ports:
      - "4000:80"   # allows us to access the web console

  dtc-zipkin:
    container_name: dtc-zipkin
    image: openzipkin/zipkin-slim
    ports:
      - "19411:9411"  # allows us to access the web console

  dapr-placement:
    container_name: dapr-placement
    image: "daprio/dapr"
    command: ["./placement", "--port", "50006"]
    ports:
      - "50006:50006"